// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

// Report Entity
model Report {
  id          Int      @id @default(autoincrement())
  email       String
  description String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Model Overwrites
  @@map(name: "report")
}

// User Entity
enum UserType {
  USER
  ADMIN
  DEVELOPER

  @@map(name: "user_type")
}

model UserRole {
  // keys
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  users User[]
}

model UserGeo {
  // keys
  id     Int    @id @default(autoincrement())
  userId String @map("user_id")

  // Columns
  lat       Decimal?
  lon       Decimal?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_geo")
}

model UserAddress {
  // keys
  id     Int    @id @default(autoincrement())
  userId String @map("user_id")

  // Columns
  streetAddress  String?  @map("street_address")
  streetAddress2 String?  @map("street_address_2")
  city           String?
  country        String?
  postalCode     String?  @map("postal_code")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_address")
}

model User {
  // Keys
  id         String   @id @default(cuid())
  userRoleId Int?     @map("user_role_id")
  userType   UserType @default(USER) @map("user_type")

  // Fields
  email     String   @unique
  password  String
  fname     String?  @map("f_name")
  lname     String?  @map("l_name")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Relationships
  address          UserAddress?
  geo              UserGeo?
  userRole         UserRole?         @relation(fields: [userRoleId], references: [id])
  ideas            Idea[]
  ideaRatings      IdeaRating[]
  ideaComments     IdeaComment[]
  ideaCommentLikes IdeaCommentLike[]


  // Model overwrites
  @@map(name: "user")
}

// Category entity
model Category {
  // keys
  id Int @id @default(autoincrement())

  // Fields
  title       String   @unique
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  ideas Idea[]

  @@map(name: "category")
}

// Idea Entity
enum IdeaState {
  IDEA
  PROPOSAL
  PROJECT

  @@map(name: "idea_state")
}

model IdeaGeo {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // Columns
  lat       Decimal?
  lon       Decimal?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_geo")
}

model IdeaAddress {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // Columns
  streetAddress  String?  @map("street_address")
  streetAddress2 String?  @map("street_address_2")
  city           String?
  country        String?
  postalCode     String?  @map("postal_code")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_address")
}

model Idea {
  // Keys
  id         Int    @id @default(autoincrement())
  authorId   String @map("author_id")
  categoryId Int    @map("category_id")

  // Values
  title               String
  description         String
  communityImpact     String?   @map("community_impact")
  natureImpact        String?   @map("nature_impact")
  artsImpact          String?   @map("arts_impact")
  energyImpact        String?   @map("energy_impact")
  manufacturingImpact String?   @map("manufacturing_impact")
  state               IdeaState @default(IDEA)
  active              Boolean   @default(true)
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  comments     IdeaComment[]
  ratings      IdeaRating[]
  proposalInfo Proposal?
  projectInfo  Project?
  address      IdeaAddress?
  geo          IdeaGeo?


  author   User     @relation(fields: [authorId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map(name: "idea")
}

model Proposal {
  // Keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // Fields
  // TODO: Add fields that would be in Proposal state
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Relations
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "proposal")
}

model Project {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // fields
  // TODO: Add fields that would be in Project state
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "project")
}

model IdeaRating {
  // Keys
  id       Int    @id @default(autoincrement())
  ideaId   Int    @map("idea_id")
  authorId String @map("author_id")

  // Fields
  rating            Int      @default(0)
  ratingExplanation String?  @map("rating_explanation")
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  author User @relation(fields: [authorId], references: [id])
  idea   Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_rating")
}

model IdeaComment {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id")

  // Fields
  authorId  String   @map("author_id")
  content   String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  author User              @relation(fields: [authorId], references: [id])
  idea   Idea              @relation(fields: [ideaId], references: [id])
  likes  IdeaCommentLike[]

  @@map(name: "idea_comment")
}

model IdeaCommentLike {
  // keys
  id            Int    @id @default(autoincrement())
  authorId      String @map("author_id")
  ideaCommentId Int    @map("idea_comment_id")

  // fields
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  author      User        @relation(fields: [authorId], references: [id])
  ideaComment IdeaComment @relation(fields: [ideaCommentId], references: [id])

  @@map(name: "idea_comment_like")
}
